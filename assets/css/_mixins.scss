// mixins

//for use => @include property(attr);

/// Responsive breakpoint manager min-width
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin media-min($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    // $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), $raw-query);

    @media ( min-width: #{$query} ) {
      @content;
    }
  } @else {
    @error 'No value found for media-min -> `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Responsive breakpoint manager max-width
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin media-max($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    // $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));
    $query: if(type-of($raw-query) == 'string', unquote($raw-query), $raw-query);
    $subaaa: 1px;
    $meadia-query: ($query - $subaaa);

    @media ( max-width: #{$meadia-query} ) {
      @content;
    }
  } @else {
    @error 'No value found for media-max -> `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Setup prefered color scheme
/// @access public
/// @param {String} $color-scheme // light | dark
/// @requires $color-scheme
@mixin prefered-color-scheme($color-scheme) {
  $raw-query: map-get($prefered-color-schemes, $color-scheme);

  @if $raw-query {
    // $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));
    $color-scheme: if(type-of($raw-query) == 'string', unquote($raw-query), $raw-query);

    @media screen and (prefers-color-scheme: #{$color-scheme}) {
      @content;
    }
  } @else {
    @error 'No value found for prefered-color-scheme -> `#{$color-scheme}`. '
         + 'Please make sure it is defined in `$prefered-color-schemes` map.';
  }
}

/// add media - Printing
@mixin print {
  @media print {
    @content;
  }
}

/// Mixin helper to output vendor prefixes for PROPERTIES
/// @access public
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
@mixin prefix($property, $value, $prefixes: $PREFIXES) {
  @each $prefix in $prefixes {
    #{$prefix}#{$property}: $value;
  }
}
/// Mixin helper to output vendor prefixes for VALUES
/// @access public
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
@mixin prefix-value($property, $value, $prefixes: $PREFIXES) {
  @each $prefix in $prefixes {
    #{$property}: #{$prefix}#{$value};
  }
}

//background
@mixin background-cover($url: null, $color: null) {
  @if ($url) {
    background-image: url($url);
  }
  @if ($color) {
    background-color: $color;
  }
  background: {
    position: center;
    repeat: no-repeat;
    size: cover;
  }
}
@mixin background-contain($url: null, $color: null) {
  @if ($url) {
    background-image: url($url);
  }
  @if ($color) {
    background-color: $color;
  }
  background: {
    position: center;
    size: cover;
    repeat: no-repeat;
  }
}
@mixin background-image-prefix($value, $prefixes: $PREFIXES) {
  @each $prefix in $prefixes {
    $val-list: null;
    $sep: null;
    @each $val in $value {
      @if $val-list {
        $sep: ', ';
      }
      $val-list: #{$val-list}#{$sep}#{$prefix}#{$val};
    }
    background-image: $val-list;
  }
}

@mixin background-gradient(
  $deg: 45deg,
  $c1: rgba(0, 0, 0, 0.2),
  $s1: 1rem,
  $c2: transparent,
  $s2: $sw1,
  $prefixes: $PREFIXES
) {
  $property: 'background-image';
  $value: linear-gradient($deg, $c1 $s1, $c2 $s2);
  @include prefix-value($property, $value);
}

@mixin background-stripes(
  $deg: 45deg,
  $sc1: rgba(0, 0, 0, 0.2),
  $sw1: 1rem,
  $sc2: transparent,
  $sw2: $sw1,
  $prefixes: $PREFIXES
) {
  $end-stop: ($sw1 + $sw2);
  $property: 'background-image';
  $value: repeating-linear-gradient($deg, $sc1 0, $sc1 $sw1, $sc2 $sw1, $sc2 $end-stop);
  @include prefix-value($property, $value);
}
// / placeholder - special vendor template
// / @param: $selector -> selector | default -> nesting selector "&"
@mixin placeholder($selector: &) {
  /* have to be separate due browser fail */
  // @at-root #{$selector + ':-ms-input-placeholder'} { /* IE 10+ */
  // @content; // }
  @at-root #{$selector + '::-ms-placeholder'} {
    @content;
  } // @at-root #{$selector + ':-moz-placeholder'} { /* Firefox 18- */ // @content; // }
  @at-root #{$selector + '::-moz-placeholder'} {
    /* Firefox 19+ */
    @content;
  }
  @at-root #{$selector + '::-webkit-input-placeholder'} {
    /* Chrome/Opera/Safari */
    @content;
  }
  @at-root #{$selector + '::-webkit-placeholder'} {
    @content;
  }
  @at-root #{$selector + '::placeholder'} {
    @content;
  }
}
// positio absolute center
@mixin position-center($z: 1) {
  position: absolute;
  top: 50%;
  right: 50%;
  z-index: $z;
  @include translate(50%, -50%);
}
// / selection - special vendor template
// / @param: $selector -> selector | default -> parent "&"
// / @param {List} $prefixes - List of prefixes to output
@mixin selection($selector: &, $prefixes: $PREFIXES) {
  /* have to be separate due browser fail */
  @each $prefix in $prefixes {
    @at-root #{$selector + '::' + $prefix + 'selection'} {
      @content;
    }
  }
}
// size width, [height]?:width
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
// / transform simplify and with vendor
// transform -vendor
@mixin transform($val) {
  @include prefix('transform', unquote($val));
}
// transform - translate
@mixin translate($x, $y: $x) {
  @include transform(translate($x, $y));
}
@mixin translateX($x) {
  @include transform(translateX($x));
}
@mixin translateY($y) {
  @include transform(translateY($y));
}
// transform - rotate
@mixin rotate($deg) {
  @include transform(rotate($deg));
}
// transform - skew
@mixin skew($x, $y: $x) {
  @include transform(skew($x, $y));
}
@mixin skewX($x) {
  @include transform(skewX($x));
}
@mixin skewY($y) {
  @include transform(skewY($y));
}
// transform - scale
@mixin scale($x, $y: $x) {
  // NOTE: // $y: $x // @if ( $y ){ // @include transform( scale($x, $y) ); // } @else { // @include transform( scale($x) );
  // }
  @include transform(scale($x, $y));
}
@mixin scaleX($float) {
  @include transform(scaleX($float));
}
@mixin scaleY($float) {
  @include transform(scaleY($float));
}
// ////
